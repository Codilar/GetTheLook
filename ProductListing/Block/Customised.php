<?php
/**
 * Created by PhpStorm.
 * User: manish
 * Date: 11/1/19
 * Time: 4:07 PM
 */

namespace Codilar\ProductListing\Block;

use Magento\Catalog\Model\CategoryFactory;
use Magento\Catalog\Model\CategoryRepository;
use Magento\Catalog\Model\ResourceModel\Category\CollectionFactory;
use Magento\Framework\App\RequestInterface;
use Magento\Framework\Registry;
use Magento\Framework\View\Element\Template;

class Customised extends Template
{
    public $registry;
    private $categoryRepository;
    public $collectionFactory;
    public $request;
    public $categoryFactory;
    /**
     * @var \Magento\Catalog\Helper\Image
     */
    private $productImageHelper;
    /**
     * @var \Magento\Catalog\Model\ProductRepository
     */
    private $productRepository;

    public function __construct(
        Template\Context $context,
        Registry $registry,
        CollectionFactory $collectionFactory,
        RequestInterface $request,
        CategoryFactory $categoryFactory,
        CategoryRepository $categoryRepository,
        \Magento\Catalog\Model\ProductRepository $productRepository,
        \Magento\Catalog\Helper\Image $productImageHelper,
        array $data = []
    ) {
        $this->registry = $registry;
        $this->collectionFactory = $collectionFactory;
        $this->categoryRepository = $categoryRepository;
        $this->request=$request;
        $this->categoryFactory = $categoryFactory;
        parent::__construct($context, $data);
        $this->productImageHelper = $productImageHelper;
        $this->productRepository = $productRepository;
    }
    protected function _prepareLayout()
    {
        return parent::_prepareLayout(); // TODO: Change the autogenerated stub
    }

    public function getParam()
    {
        $par= $this->getRequest()->getParams();
        return $par;
    }

    public function getCurrentCategoryId()
    {
        $collection = $this->collectionFactory->create()->addFieldToSelect('entity_id')
                ->addFieldToFilter('name', $this->getMainSelectCategoryParam());
        return $collection->getFirstItem()->getData('entity_id');
    }

    public function getCurrentCategory()
    {
        $category = $this->registry->registry('look_category');
        return $category;
    }

    public function getChildCategory()
    {
        if (!empty($this->getCurrentCategory())) {
            $categoryObj = $this->categoryRepository->get($this->getCurrentCategory());
            $subcategories = $categoryObj->getChildrenCategories();
            return $subcategories;
        } else {
            return null;
        }
    }
    public function getSubCat()
    {
        return $this->getData('id');
    }

    public function getSubName()
    {
        return $this->getData('sub_name');
    }
    public function getProductById($id)
    {
        return $this->productRepository->getById($id);
    }

    public function getProductBySku($sku)
    {
        return $this->productRepository->get($sku);
    }

    public function resizeImage($product, $imageId, $width, $height = null)
    {
        $resizedImage = $this->productImageHelper
            ->init($product, $imageId)
            ->constrainOnly(true)
            ->keepAspectRatio(true)
            ->keepTransparency(true)
            ->keepFrame(false)
            ->resize($width, $height);
        return $resizedImage;
    }

    public function getProductByCategoryId($categoryId)
    {
        $productCollection = $this->categoryFactory->create()->load($categoryId)->getProductCollection()->addAttributeToSelect('*');
        return $productCollection;
    }
}
